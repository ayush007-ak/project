{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.getChildMapping = getChildMapping;\nexports.mergeChildMappings = mergeChildMappings;\n\nvar _react = require('react');\n/**\r\n * Given `this.props.children`, return an object mapping key to child.\r\n *\r\n * @param {*} children `this.props.children`\r\n * @return {object} Mapping of key to child\r\n */\n\n\nfunction getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) _react.Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\r\n * When you're adding or removing children some may be added or removed in the\r\n * same render pass. We want to show *both* since we want to simultaneously\r\n * animate elements in and out. This function takes a previous set of keys\r\n * and a new set of keys and merges them with its best guess of the correct\r\n * ordering. In the future we may expose some of the utilities in\r\n * ReactMultiChild to make this easy, but for now React itself does not\r\n * directly have this concept of the union of prevChildren and nextChildren\r\n * so we implement it here.\r\n *\r\n * @param {object} prev prev children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @param {object} next next children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @return {object} a key set that contains all keys in `prev` and all keys\r\n * in `next` in a reasonable order.\r\n */\n\n\nfunction mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i = void 0;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}","map":{"version":3,"sources":["E:/React proj/react1/node_modules/react-transition-group/utils/ChildMapping.js"],"names":["exports","__esModule","getChildMapping","mergeChildMappings","_react","require","children","mapFn","mapper","child","isValidElement","result","Object","create","Children","map","c","forEach","key","prev","next","getValueForKey","nextKeysPending","pendingKeys","prevKey","length","push","i","childMapping","nextKey","pendingNextKey"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nexports.__esModule = true;\r\nexports.getChildMapping = getChildMapping;\r\nexports.mergeChildMappings = mergeChildMappings;\r\n\r\nvar _react = require('react');\r\n\r\n/**\r\n * Given `this.props.children`, return an object mapping key to child.\r\n *\r\n * @param {*} children `this.props.children`\r\n * @return {object} Mapping of key to child\r\n */\r\nfunction getChildMapping(children, mapFn) {\r\n  var mapper = function mapper(child) {\r\n    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;\r\n  };\r\n\r\n  var result = Object.create(null);\r\n  if (children) _react.Children.map(children, function (c) {\r\n    return c;\r\n  }).forEach(function (child) {\r\n    // run the map function here instead so that the key is the computed one\r\n    result[child.key] = mapper(child);\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * When you're adding or removing children some may be added or removed in the\r\n * same render pass. We want to show *both* since we want to simultaneously\r\n * animate elements in and out. This function takes a previous set of keys\r\n * and a new set of keys and merges them with its best guess of the correct\r\n * ordering. In the future we may expose some of the utilities in\r\n * ReactMultiChild to make this easy, but for now React itself does not\r\n * directly have this concept of the union of prevChildren and nextChildren\r\n * so we implement it here.\r\n *\r\n * @param {object} prev prev children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @param {object} next next children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @return {object} a key set that contains all keys in `prev` and all keys\r\n * in `next` in a reasonable order.\r\n */\r\nfunction mergeChildMappings(prev, next) {\r\n  prev = prev || {};\r\n  next = next || {};\r\n\r\n  function getValueForKey(key) {\r\n    return key in next ? next[key] : prev[key];\r\n  }\r\n\r\n  // For each key of `next`, the list of keys to insert before that key in\r\n  // the combined list\r\n  var nextKeysPending = Object.create(null);\r\n\r\n  var pendingKeys = [];\r\n  for (var prevKey in prev) {\r\n    if (prevKey in next) {\r\n      if (pendingKeys.length) {\r\n        nextKeysPending[prevKey] = pendingKeys;\r\n        pendingKeys = [];\r\n      }\r\n    } else {\r\n      pendingKeys.push(prevKey);\r\n    }\r\n  }\r\n\r\n  var i = void 0;\r\n  var childMapping = {};\r\n  for (var nextKey in next) {\r\n    if (nextKeysPending[nextKey]) {\r\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\r\n        var pendingNextKey = nextKeysPending[nextKey][i];\r\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\r\n      }\r\n    }\r\n    childMapping[nextKey] = getValueForKey(nextKey);\r\n  }\r\n\r\n  // Finally, add the keys which didn't appear before any key in `next`\r\n  for (i = 0; i < pendingKeys.length; i++) {\r\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\r\n  }\r\n\r\n  return childMapping;\r\n}"]},"metadata":{},"sourceType":"script"}